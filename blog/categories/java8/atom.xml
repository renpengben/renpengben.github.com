<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java8 | Renpeng's Blog]]></title>
  <link href="http://renpengben.github.io/blog/categories/java8/atom.xml" rel="self"/>
  <link href="http://renpengben.github.io/"/>
  <updated>2014-06-16T21:20:07+08:00</updated>
  <id>http://renpengben.github.io/</id>
  <author>
    <name><![CDATA[Renpeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java8新特性之改进推断类型]]></title>
    <link href="http://renpengben.github.io/blog/2014/06/16/improved-type-inference/"/>
    <updated>2014-06-16T21:17:43+08:00</updated>
    <id>http://renpengben.github.io/blog/2014/06/16/improved-type-inference</id>
    <content type="html"><![CDATA[<p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型。
一般泛型的定义：
<code>java
List&lt;People&gt; box = new ArrayList&lt;People&gt;();
box.add(new People());
People people =box.get(0);
</code>
泛型的优点很明显第一提高了类型的安全，第二消除强制类型的转换，但是尴尬的地方就是每次定义时都要写明泛型的类型，这样显示指定感觉有些冗长。
Java7的泛型类型推断改进：
<code>java
Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); //注意后面的"&lt;&gt;"
</code>
上述Map的定义编译器会根据变量声明时的泛型类型自动推断出实例化HashMap时的泛型类型。注意new HashMap后面的“&lt;>”，只有加上这个“&lt;>”才表示是自动类型推断，否则就是非泛型类型的HashMap，并且在使用编译器编译源代码时会给出一个警告提示。
</br>
Java SE 7在创建泛型实例时的类型推断是有限制的：</br>
只有构造器的参数化类型在上下文中被显著的声明了，才可以使用类型推断，否则不行。
<code>java
List&lt;String&gt; list = new ArrayList&lt;&gt;();
list.add("A");
//下面addAll方法无法通过编译，由于addAll期望获得Collection&lt;? extends String&gt;类型的参数
list.addAll(new ArrayList&lt;&gt;());
</code></p>

<p>Java8泛型类型推断改进：</p>

<p>1.支持通过方法上下文推断泛型目标类型。</p>

<p>2.支持在方法调用链路当中，泛型类型推断传递到最后一个方法。
官方例子：
``` java
class List<E> {</p>

<p>   static <Z> List<Z> nil() { &hellip; };
   static <Z> List<Z> cons(Z head, List<Z> tail) { &hellip; };
   E head() { &hellip; }
}</p>

<p>//通过方法赋值的目标参数来自动推断泛型的类型
List<String> l = List.nil();
//而不是显示的指定类型
//List<String> l = List.<String>nil();
//通过前面方法参数类型推断泛型的类型
List.cons(42, List.nil());
//而不是显示的指定类型
//List.cons(42, List.<Integer>nil());</p>

<p><code>
所以上面addAll出错的例子在Java8中依据方法参数类型推断就不会出错了。
</code> java
//下面代码Java8通过编译
List<String> list = new ArrayList&lt;>();
list.add(&ldquo;A&rdquo;);
//根据add方法中的"A"参数推断new ArrayList&lt;>()的类型为new ArrayList<String>()
list.addAll(new ArrayList&lt;>());
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8新特性之重复注解]]></title>
    <link href="http://renpengben.github.io/blog/2014/06/16/repeating-annotations/"/>
    <updated>2014-06-16T21:12:22+08:00</updated>
    <id>http://renpengben.github.io/blog/2014/06/16/repeating-annotations</id>
    <content type="html"><![CDATA[<p>允许在同一类，属性，或方法多次使用同一个注解。</br>
 java8之前也可以重复注解，但代码可读性不好，如下：
``` java
public @interface Authority {</p>

<pre><code> String role();
</code></pre>

<p>}</p>

<p>public @interface Authorities {</p>

<pre><code>Authority[] value();
</code></pre>

<p>}</p>

<p>public class RepeatAnnotationUseOldVersion {</p>

<pre><code>@Authorities({@Authority(role="Admin"),@Authority(role="Manager")})
public void doSomeThing(){
}
</code></pre>

<p>}
<code>
 java8实现重复注解方式如下：
</code> java
@Repeatable(Authorities.class)
public @interface Authority {</p>

<pre><code> String role();
</code></pre>

<p>}</p>

<p>public @interface Authorities {</p>

<pre><code>Authority[] value();
</code></pre>

<p>}</p>

<p>public class RepeatAnnotationUseNewVersion {</p>

<pre><code>@Authority(role="Admin")
@Authority(role="Manager")
public void doSomeThing(){ }
</code></pre>

<p>}
```
java8创建重复注解Authority时，加上@Repeatable,指向存储注解Authorities，在使用时候，直接可以重复使用Authority注解,java8实现方式可读性比之前强。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8新特性之默认方法]]></title>
    <link href="http://renpengben.github.io/blog/2014/06/16/default-m-methods/"/>
    <updated>2014-06-16T21:10:07+08:00</updated>
    <id>http://renpengben.github.io/blog/2014/06/16/default-m-methods</id>
    <content type="html"><![CDATA[<p>默认方法：简单的说接口可以有实现方法，而且不需要实现类去实现其方法。只需在方法名前面加个default关键字即可。
``` java
public interface DefaultMethod {</p>

<pre><code>default void foo(){
    System.out.println("调用DefaultMethod接口的默认方法foo");
}
</code></pre>

<p>}</p>

<p>public class DefaultMethodTest implements DefaultMethod {</p>

<pre><code>public static void main(String[] args) {
    DefaultMethodTest defaultMethodTest = new DefaultMethodTest();
    defaultMethodTest.foo();// 调用DefaultMethod.foo

}
</code></pre>

<p>}
```</p>

<h4>java8抽象类与接口对比</h4>

<pre>
相同点:
      1.都是抽象类型。
      2.都可以有实现方法（java 8 接口有default method）。
      3.都可以不需要实现类或者继承者去实现所有方法。
不同点:
       1.抽象类不可以多重继承,接口可以。
       2.抽象类是is-a的关系，接口表示是like-a关系。
       3.接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能重新定义，也不能改变其值；
         抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。
</pre>


<h4>多重继承</h4>

<p>如果一个类实现了两个接口，并且两个接口都用相同的签名定义了默认方法，这该怎么办？
``` java
public interface A {</p>

<pre><code>default void foo() {
    System.out.println("Calling A.foo()");

}
</code></pre>

<p>}</p>

<p>public interface B {</p>

<pre><code>default void foo() {
    System.out.println("Calling B.foo()");

}
</code></pre>

<p>}</p>

<p>public class AB implements A, B {</p>

<p>}
//Duplicate default methods named foo with the parameters () and () are inherited from the types B and A。
<code>
上面代码通不过编译：类AB从A,B接口继承了重复的默认方法foo。
解决此问题AB类必须重写冲突方法:
</code> java
public class AB implements A, B {</p>

<pre><code>@Override
public void foo() {

}
</code></pre>

<p>}
<code>
如果AB类想调用接口的默认方法，那么可以按照以下方式：
</code> java</p>

<pre><code>@Override
public void foo() {
    A.super.foo();
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8新特性之方法引用]]></title>
    <link href="http://renpengben.github.io/blog/2014/06/16/method-references/"/>
    <updated>2014-06-16T21:05:48+08:00</updated>
    <id>http://renpengben.github.io/blog/2014/06/16/method-references</id>
    <content type="html"><![CDATA[<p>方法引用其实是lambda表达式的一个简化写法，所引用的方法其实是lambda表达式的方法体实现。
</br>
 <strong><em>语法:</em></strong>
``` java
 ObjectReference::methodName</p>

<p>如果是静态方法，ClassName::methodName。如 Object ::equals</p>

<p>如果是实例方法，Instance::methodName。如Object obj=new Object();obj::equals;</p>

<p>构造函数，ClassName::new
<code>
***例子***
</code> java</p>

<pre><code>@FunctionalInterface
interface Converter&lt;F, T&gt; {
    T convert(F from);
}
</code></pre>

<p><code>
使用常规的Lambda表达式：
</code> java</p>

<pre><code>Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);
Integer converted = converter.convert("1024");
System.out.println(converted); // 1024
</code></pre>

<p><code>
静态方法引用：
</code> java</p>

<pre><code>Converter&lt;String, Integer&gt; converter = Integer::valueOf;
Integer converted = converter.convert("1024");
System.out.println(converted); // 1024
</code></pre>

<p><code>
对象方法引用:
</code> java
public class Something {</p>

<pre><code>String startsWith(String s) {
    return String.valueOf(s.charAt(0));
}
</code></pre>

<p>}</p>

<pre><code>    Something something = new Something();
    Converter&lt;String, String&gt; converter = something::startsWith;
    String converted = converter.convert("Java");
    System.out.println(converted); // J
</code></pre>

<p><code>
构造函数引用:
</code> java
class Person {</p>

<pre><code>String firstName;
String lastName;

Person() {}

Person(String firstName, String lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
}
@Override
public String toString() {
    return "Person [firstName=" + firstName + ", lastName=" + lastName
            + "]";
}
</code></pre>

<p>}</p>

<p>@FunctionalInterface
interface PersonFactory<P extends Person> {</p>

<pre><code>P create(String firstName, String lastName);
</code></pre>

<p>}</p>

<p>PersonFactory<Person> personFactory = Person::new;
Person person = personFactory.create(&ldquo;Peter&rdquo;, &ldquo;Parker&rdquo;);
System.out.println(person);//Person [firstName=Peter, lastName=Parker]
<code>
通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。
</code> java
//自动匹配Person类的 Person(String firstName, String lastName)构造函数。
PersonFactory<Person> personFactory = Person::new;
```
</br>
<strong><em>参考资料:</em></strong>
</br>
<a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">http://winterbe.com/posts/2014/03/16/java-8-tutorial/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8新特性之Lambda表达式]]></title>
    <link href="http://renpengben.github.io/blog/2014/06/10/lambda-expressions/"/>
    <updated>2014-06-10T20:06:56+08:00</updated>
    <id>http://renpengben.github.io/blog/2014/06/10/lambda-expressions</id>
    <content type="html"><![CDATA[<h2>什么是Lambda表达式？</h2>

<p>   在一般数学计算中lambda表达式就是一个函数，为部分或者所有输入值指定一个输出值，在java中Lambad表达式是以函数的概念引入，可以理解为一种语法更加紧凑的匿名方法，并且允许省略修饰符，返回类型并且某种情况下的参数类型。
</br>
 <strong><em>语法:</em></strong>
 </br>
  lambda基本语法:
<code>java
   (parameters) -&gt; expression
   or
   (parameters) -&gt; { statements; }
</code></p>

<p><strong><em>Examples:</em></strong>
<code>java
  (int x,int y)-&gt;x+y   //取整数x,y并返回它们的和
  (x, y) -&gt; x - y  //取整数x,y并返回它们的差                                
  () -&gt; 42  //不取任何值，直接返回42                                         
  (String s) -&gt; System.out.println(s) //取字符串s，在控制台打印，不返回任何值。             
  x -&gt; 2 * x  //取一个数字，返回它的2倍                                      
  c -&gt; { int s = c.size(); c.clear(); return s; }//取集合c，清空它，然后返回它清空前的大小
</code>
 <strong><em>语法说明</em></strong>
   <pre>
   1.参数类型可以显式声明(ex.1,4)或者隐式推断(ex.2,5,6),显式声明和隐式推断参数不允许用在同一个lambda表达式。
   2.lambda body可以是一个block({}大括号包含代码块ex.6)或者是一个表达式(ex.1-5)。block body可以返回值(ex.6)
   或者什么都不返回()。
   3.如果lambda body是一个表达式，它也可能返回值(ex.1,2,3,5)或者什么都不返回(ex.4)。
   4.隐式推断可以省略()(ex.5,6)。
   5.ex.6 lambda能操作一个集合，同样的，根据上下文给定的参数，如果一个参数a拥有size和clear方法，
   它也能操作并返回其类型的值。
   </pre></p>

<p><strong><em>函数式接口</em></strong></br>
Lambda表达式如何匹配Java的类型系统？每一个lambda都能够通过一个特定的接口，与一个给定的类型进行匹配。</br>
一个所谓的函数式接口必须要有且仅有一个抽象方法声明(java8允许接口有默认方法)。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。</br></br>
1、一个可以接受Lambda表达式的接口只能有一个抽象方法，否则在编译时将抛出异常。</br>
2、为了显示的说明某接口是可使用lambda表达式,可以使用<code>   @FunctionalInterface </code>注解该接口。</br>
``` java
@FunctionalInterface
interface Converter&lt;F, T> {</p>

<pre><code>T convert(F from);//抽象方法只能一个

default double sqrt(int a) {//可以多个接口默认方法
    return Math.sqrt(a);
}
</code></pre>

<p>}</p>

<p>Converter&lt;String, Integer> converter = (from) &ndash;> Integer.valueOf(from);
Integer converted = converter.convert(&ldquo;123&rdquo;);
System.out.println(converted);    // 123
<code>
&lt;a href=""&gt;Default Methods(默认方法)详情&lt;/a&gt;
&lt;/br&gt;
注意，如果不写</code>    @FunctionalInterface  ```标注，程序也是正确的。</p>

<p><strong><em>官网例子</em></strong>
</br>
``` java
   public class Calculator {</p>

<pre><code>interface IntegerMath {
    int operation(int a, int b);   
}

public int operateBinary(int a, int b, IntegerMath op) {
    return op.operation(a, b);
}

public static void main(String... args) {

    Calculator myApp = new Calculator();
    IntegerMath addition = (a, b) -&gt; a + b;//隐式推断类型
    IntegerMath subtraction = (int a, int b) -&gt; a - b;//显式声明类型
    System.out.println("40 + 2 = " +
        myApp.operateBinary(40, 2, addition));
    System.out.println("20 - 10 = " +
        myApp.operateBinary(20, 10, subtraction));    
}
</code></pre>

<p>}
```</p>

<h2>为什么Java要增加lambda表达式？</h2>

<p>Lambda表达式，也叫做闭包，是一个在很多现代程序语言中十分流行的特性。在众多不同的原因中当中，Java平台最迫切的原因之一是lambda表达式能简化多线程环境下集合的分布式处理。
</br>
<strong><em>1.内部循环和外部循环</em></strong>
</br></p>

<p>  常规的外部循环:</p>

<p>``` java
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);</p>

<p>for (int number : numbers) {</p>

<pre><code>System.out.println(number);  
</code></pre>

<p>}</p>

<p>```
这种情况简单的存在3个缺点:</p>

<p>1.只能顺序处理List中的元素</p>

<p>2.不能充分利用多核CPU</p>

<p>3.不利于编译器优化
</br>
使用Lamdba表达式内部循环：</p>

<p>``` java
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);</p>

<p>numbers.forEach((Integer value) &ndash;> System.out.println(value));</p>

<p>```
1.不一定需要顺序处理List中的元素，顺序可以不确定</p>

<p>2.可以并行处理，充分利用多核CPU的优势</p>

<p>3.有利于JIT编译器对代码进行优化
</br></p>

<p><strong><em>2、传递行为，而不仅仅是传值</em></strong>
</br>
传值局限性的场景</p>

<p>``` java
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);</p>

<p>public int sumAll(List<Integer> numbers) {</p>

<pre><code>int total = 0;  
for (int number : numbers) {  
    total += number;  
}  
return total;  
</code></pre>

<p>}</p>

<p><code>
sumAll算法很简单，完成的是将List中所有元素相加。某一天如果需要增加一个对List中所有偶数求和的方法sumAllEven，如下：
</code> java
public int sumAllEven(List<Integer> numbers) {</p>

<pre><code>int total = 0;  
for (int number : numbers) {  
    if (number % 2 == 0) {  
        total += number;  
    }  
}  
return total;  
</code></pre>

<p>}</p>

<p>```
又有一天，需要增加第三个方法：对List中所有大于3的元素求和，那是不是继续加下面的方法呢?</p>

<p>``` java
public int sumAllEven(List<Integer> numbers) {</p>

<pre><code>int total = 0;  
for (int number : numbers) {  
    if (number &gt; 3) {  
        total += number;  
    }  
}  
return total;  
</code></pre>

<p>}</p>

<p>```
比较这三个方法，发现了一个很明显的“代码臭味”—— 代码重复。
如果使用Lambda表达式，那么需要Lambda表达式中的谓词（Predicate）发挥作用：</p>

<p>``` java
public int sumAll(List<Integer> numbers, Predicate<Integer> p) {</p>

<pre><code>int total = 0;  
for (int number : numbers) {  
    if (p.test(number)) {  
        total += number;  
    }  
}  
return total;  
</code></pre>

<p>}</p>

<p>sumAll(numbers, n &ndash;> true);<br/>
sumAll(numbers, n &ndash;> n % 2 == 0);<br/>
sumAll(numbers, n &ndash;> n > 3);</p>

<p>```
</br></p>

<p><strong><em>3、Consumer与Loan Pattern</em></strong>
</br>
比如有一个资源类Resource：</p>

<p>``` java
public class Resource {</p>

<pre><code>public Resource() {
    System.out.println("Opening resource");
}

public void operate() {
    System.out.println("Operating on resource");
}

public void dispose() {
    System.out.println("Disposing resource");
}
</code></pre>

<p>}
//调用
Resource resource = new Resource();<br/>
try {</p>

<pre><code>resource.operate();  
</code></pre>

<p>} finally {</p>

<pre><code>resource.dispose();  
</code></pre>

<p>}</p>

<p>```
但是有一个问题，如果很多地方都要用到这个资源，那么就存在很多段类似这样的代码，这很明显违反了DRY（Don&rsquo;t Repeat It Yourself）原则。而且如果某位程序员由于某些原因忘了用try/finally处理资源，那么很可能导致内存泄漏。那咋办呢？Java 8提供了一个Consumer接口，代码改写为如下：</br>
因为对资源对象resource执行operate方法时可能抛出RuntimeException，所以需要在finally语句块中释放资源，防止可能的内存泄漏。</p>

<p>``` java
public class Resource {</p>

<pre><code>public Resource() {
    System.out.println("Opening resource");
}

public void operate() {
    System.out.println("Operating on resource");
}

public void dispose() {
    System.out.println("Disposing resource");
}

public static void withResource(Consumer&lt;Resource&gt; consumer) {
    Resource resource = new Resource();
    try {
        consumer.accept(resource);
    } finally {
        resource.dispose();
    }
}

public static void main(String[] args) {
    Resource.withResource(resource -&gt; resource.operate());
}
</code></pre>

<p>}</p>

<p>Console:
Opening resource
Operating on resource
Disposing resource</p>

<p>```
外部要访问Resource，只能通过withResource方法了，而且也完全杜绝了因人为疏忽而导致的潜在内存泄漏。
</br></p>

<h2>Lambda表达式范围</h2>

<p>对于lambdab表达式外部的变量，其访问权限的粒度与匿名对象的方式非常类似。
``` java
@FunctionalInterface
interface Converter&lt;F, T> {</p>

<pre><code>T convert(F from);
</code></pre>

<p>}</p>

<p><code>
1.访问局部变量
</code> java
final int num = 1;
Converter&lt;Integer, String> stringConverter =</p>

<pre><code>    (from) -&gt; String.valueOf(from + num);
</code></pre>

<p>stringConverter.convert(2);     // 3</p>

<p>```
与匿名对象不同的是，变量num不一定是final。</p>

<p>``` java
 int num = 1;//去掉final也是正确的
Converter&lt;Integer, String> stringConverter =</p>

<pre><code>    (from) -&gt; String.valueOf(from + num);
</code></pre>

<p>stringConverter.convert(2);     // 3</p>

<p><code>
但是num在编译的时候隐式的当作final变量来处理。
</code> java
int num = 1;
Converter&lt;Integer, String> stringConverter =</p>

<pre><code>    (from) -&gt; String.valueOf(from + num);
</code></pre>

<p>num = 3;//这样是错误的不能对final变量重新复制，在lambda表达式内部改变num的值也是不允许的</p>

<p><code>
2.访问成员变量和静态变量
与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。
</code> java
class LambdaTest {</p>

<pre><code>static int outerStaticNum;
int outerNum;

void testScopes() {
    Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; {
        outerNum = 23;
        return String.valueOf(from);
    };

    Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; {
        outerStaticNum = 72;
        return String.valueOf(from);
    };
}
</code></pre>

<p>}
<code>
默认方法无法在lambda表达式内部被访问。因此下面的代码是无法通过编译的：
</code> java
interface Formula {</p>

<pre><code>double calculate(int a);

default double sqrt(int a) {
    return Math.sqrt(a);
}
</code></pre>

<p>}
Formula formula = (a) &ndash;> sqrt( a * 100);
```</p>

<h2>内置函数式接口</h2>

<p><strong><em>Predicates</em></strong>
</br>
Predicate是一个布尔类型的函数，该函数只有一个输入参数。Predicate接口包含了多种默认方法，用于处理复杂的逻辑动词（and, or，negate）
``` java</p>

<pre><code>    Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;
    predicate.test("Java");

    Predicate&lt;String&gt; predicate1 = String::isEmpty;

    System.out.println(predicate1.test("Java"));// false
    System.out.println(predicate1.negate().test("Java"));// true

    Predicate&lt;String&gt; predicate2 = String::isEmpty;

    System.out.println(predicate2.or(predicate).test("JAVA"));// true
    System.out.println(predicate2.and(predicate).test("JAVA"));// false
    System.out.println(Predicate.isEqual("Java").test("Java"));// true
    System.out.println(Predicate.isEqual("Java").test("Java8"));// false
</code></pre>

<p>```</p>

<p>Predicate源码：
``` java
@FunctionalInterface
public interface Predicate<T> {</p>

<pre><code>boolean test(T t);
//and
default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) {
    Objects.requireNonNull(other);
    return (t) -&gt; test(t) &amp;&amp; other.test(t);
}
//取反
default Predicate&lt;T&gt; negate() {
    return (t) -&gt; !test(t);
}
//or
default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) {
    Objects.requireNonNull(other);
    return (t) -&gt; test(t) || other.test(t);
}
//isEqual
static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) {
    return (null == targetRef)
            ? Objects::isNull
            : object -&gt; targetRef.equals(object);
}
</code></pre>

<p>}
<code>
***Functions***
&lt;/br&gt;
Function接口接收一个参数，并返回单一的结果。默认方法可以将多个函数串在一起。
</code> java</p>

<pre><code>    Function&lt;String, Integer&gt; toInteger = Integer::valueOf;
    Function&lt;String, String&gt; backToString = toInteger
            .andThen(String::valueOf);
    Integer integer = toInteger.apply("123");
    String string = backToString.apply("123");
    System.out.println(integer);// 123
    System.out.println(string);// "123"


    Function&lt;String, Integer&gt; toInteger = Integer::valueOf;
    Function&lt;String, String&gt; toString = (from) -&gt; from + "123";
    //toString Function的结果作为toInteger Fuction的输入
    Integer result = toInteger.compose(toString).apply("123");//此处的"123"是toString Function的输入
    System.out.println(result);//123123     
</code></pre>

<p><code>
Function源码:
</code> java
@FunctionalInterface
public interface Function&lt;T, R> {</p>

<p>  R apply(T t);
  default <V> Function&lt;V, R> compose(Function&lt;? super V, ? extends T> before) {</p>

<pre><code>    Objects.requireNonNull(before);
    return (V v) -&gt; apply(before.apply(v));
}
</code></pre>

<p>   default <V> Function&lt;T, V> andThen(Function&lt;? super R, ? extends V> after) {</p>

<pre><code>    Objects.requireNonNull(after);
    return (T t) -&gt; after.apply(apply(t));
}
</code></pre>

<p> static <T> Function&lt;T, T> identity() {</p>

<pre><code>    return t -&gt; t;
}
</code></pre>

<p>}
<code>
***Suppliers***
&lt;/br&gt;
Supplier接口产生一个给定类型的结果。与Function不同的是，Supplier没有输入参数。
</code> java</p>

<pre><code>    Supplier&lt;Person&gt; personSupplier = Person::new;
    Person person=personSupplier.get();
</code></pre>

<p><code>
Suppliers源码：
</code> java
@FunctionalInterface
public interface Supplier<T> {</p>

<pre><code>/**
 * Gets a result.
 *
 * @return a result
 */
T get();
</code></pre>

<p>}
```</p>

<p><strong><em>Consumers</em></strong></p>

<p>Consumer代表了在一个输入参数上需要进行的操作。
为什么Java增加Lambda表达式章节的例子：</p>

<p>``` java</p>

<pre><code>public static void withResource(Consumer&lt;Resource&gt; consumer) {
    Resource resource = new Resource();
    try {
       //输入一个resource对象
        consumer.accept(resource);
    } finally {
        resource.dispose();
    }
}

public static void main(String[] args) {
     //在输入的resource对象上执行operate()操作
    Resource.withResource(resource -&gt; resource.operate());
}
</code></pre>

<p><code>
Consumer也可以将多个操作穿串一起
</code> java</p>

<pre><code> public class Person {
   private String firstName;
   private String lastName;

   Person() {

   }

   public Person(String firstName, String lastName) {
    super();
    this.firstName = firstName;
    this.lastName = lastName;
   }
   }

   //先执行打印firstName操作  
   Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println("Hello, "
            + p.getFirstName());
   //后执行打印lastName操作      
  greeter.andThen(p -&gt; System.out.println("Hello, " + p.getLastName()))
            .accept(new Person("Luke", "Skywalker"));

   Console:
   Hello, Luke
   Hello, Skywalker
</code></pre>

<p><code>
Consumer源码：
</code> java
@FunctionalInterface
public interface Consumer<T> {</p>

<pre><code>void accept(T t);
default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) {
    Objects.requireNonNull(after);
    return (T t) -&gt; { accept(t); after.accept(t); };
}
</code></pre>

<p>}
```</p>

<p><strong><em>Comparators</em></strong></p>

<p>Java 8 为这个接口添加了不同的默认方法。
``` java</p>

<pre><code>    Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.getFirstName()
            .compareTo(p2.getFirstName());

    Person p1 = new Person("John", "Doe");
    Person p2 = new Person("Alice", "Wonderland");

    comparator.compare(p1, p2); //&gt; 0
    comparator.reversed().compare(p1, p2); // &lt; 0
</code></pre>

<p>```
<strong><em>Optionals</em></strong>
</br>
Optional不是一个函数式接口，而是一个精巧的工具接口，用来防止NullPointerEception产生。
</br>
Optional类的Javadoc描述如下：
</br>
这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>

<h6>of:调用工厂方法创建Optional实例</h6>

<p><code>java
Optional&lt;String&gt; name = Optional.of("Sanaulla");
//传入参数为null，抛出NullPointerException.
Optional&lt;String&gt; someNull = Optional.of(null);
</code></p>

<h6>ofNullable:为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。</h6>

<p>ofNullable与of方法相似，唯一的区别是可以接受参数为null的情况。
<code>java
Optional empty = Optional.ofNullable(null);
</code></p>

<h6>isPresent:如果值存在返回true，否则返回false。</h6>

<p><code>java
 Optional&lt;String&gt; name = Optional.of("Java");
 System.out.println(name.isPresent());//true
</code></p>

<h6>get:如果Optional有值则将其返回，否则抛出NoSuchElementException。</h6>

<p><code>java
Optional empty = Optional.ofNullable(null);
//执行下面的代码会输出：No value present
try {
  //在空的Optional实例上调用get()，抛出NoSuchElementException
  System.out.println(empty.get());
} catch (NoSuchElementException ex) {
  System.out.println(ex.getMessage());
}
</code></p>

<h6>ifPresent:如果Optional实例有值则为其调用Consumer，否则不做处理</h6>

<p>``` java</p>

<pre><code>    Optional&lt;String&gt; name = Optional.of("Java");
    name.ifPresent((value) -&gt; {
        System.out.println("The length of the value is: " + value.length());
    //The length of the value is: 4
    });
</code></pre>

<p>```</p>

<h6>orElse:如果有值则将其返回，否则返回指定的其它值。</h6>

<p>``` java</p>

<pre><code>    Optional&lt;Object&gt; empty = Optional.ofNullable(null);
    Optional&lt;String&gt; name = Optional.of("not null");
    System.out.println(empty.orElse("There is no value present!"));
    System.out.println(name.orElse("There is some value!"));

    Console:
    There is no value present!
    not null
</code></pre>

<p>```</p>

<h6>orElseGet:orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值。</h6>

<p>``` java</p>

<pre><code>    //orElseGet与orElse方法类似，区别在于orElse传入的是默认值，
    //orElseGet可以接受一个lambda表达式生成默认值。
    System.out.println(empty.orElseGet(() -&gt; "Default Value"));
    System.out.println(name.orElseGet(() -&gt; "Default Value"));

   Console:
   Default Value
   not null
</code></pre>

<p>```</p>

<h6>orElseThrow:如果有值则将其返回，否则抛出Supplier接口创建的异常。</h6>

<p>``` java
try {
  //orElseThrow与orElse方法类似。与返回默认值不同，
  //orElseThrow会抛出lambda表达式或方法生成的异常</p>

<p>  empty.orElseThrow(ValueAbsentException::new);
} catch (Throwable ex) {
  //输出: No value present in the Optional instance
  System.out.println(ex.getMessage());
}</p>

<p>class ValueAbsentException extends Throwable {</p>

<p>  public ValueAbsentException() {</p>

<pre><code>super();
</code></pre>

<p>  }</p>

<p>  public ValueAbsentException(String msg) {</p>

<pre><code>super(msg);
</code></pre>

<p>  }</p>

<p>  @Override
  public String getMessage() {</p>

<pre><code>return "No value present in the Optional instance";
</code></pre>

<p>  }
}
```</p>

<h6>map:如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</h6>

<p>``` java</p>

<pre><code>    Optional&lt;String&gt; name = Optional.of("not null");
    Optional&lt;String&gt; upperName = name.map((value) -&gt; value.toUpperCase());
    //输出:NOT NULL
    System.out.println(upperName.orElse("No value found"));
</code></pre>

<p>```</p>

<h6>flatMap:如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</h6>

<p>``` java</p>

<pre><code>    Optional&lt;String&gt; name = Optional.of("not null");
    name = name.flatMap((value) -&gt; Optional.of(value.toUpperCase()));
    //输出:NOT NULL
    System.out.println(name.orElse("No value found"));    
</code></pre>

<p>```</p>

<h6>filter:filter个方法通过传入限定条件对Optional实例的值进行过滤。对于filter函数应该传入实现了Predicate接口的lambda表达式。</h6>

<p>``` java</p>

<pre><code>    Optional&lt;String&gt; name = Optional.of("Sanaulla");
    //filter方法检查给定的Option值是否满足某些条件。
    //如果满足则返回同一个Option实例，否则返回空Optional。
    Optional&lt;String&gt; longName = name.filter((value) -&gt; value.length() &gt; 6);
    System.out.println(longName.orElse("The name is less than 6 characters"));//输出Sanaulla

    //另一个例子是Optional值不满足filter指定的条件。
    Optional&lt;String&gt; anotherName = Optional.of("Sana");
    Optional&lt;String&gt; shortName = anotherName.filter((value) -&gt; value.length() &gt; 6);
    //输出：The name is less than 6 characters
    System.out.println(shortName.orElse("The name is less than 6 characters"));
</code></pre>

<p>```
</br>
<strong><em>参考资料:</em></strong>
</br>
<a href="http://www.lambdafaq.org/">http://www.lambdafaq.org/</a>
</br>
<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#use-case">http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#use-case</a>
</br>
<a href="http://java.dzone.com/articles/why-we-need-lambda-expressions">http://java.dzone.com/articles/why-we-need-lambda-expressions</a>
</br>
<a href="http://java.dzone.com/articles/why-we-need-lambda-expressions-0">http://java.dzone.com/articles/why-we-need-lambda-expressions-0</a>
</br>
<a href="http://www.javacodegeeks.com/2013/09/deep-dive-into-optional-class-api-in-java-8.html">http://www.javacodegeeks.com/2013/09/deep-dive-into-optional-class-api-in-java-8.html</a></p>
]]></content>
  </entry>
  
</feed>
