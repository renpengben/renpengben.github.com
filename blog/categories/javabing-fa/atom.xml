<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java并发 | Renpeng's Blog]]></title>
  <link href="http://renpengben.github.io/blog/categories/javabing-fa/atom.xml" rel="self"/>
  <link href="http://renpengben.github.io/"/>
  <updated>2014-06-16T21:14:31+08:00</updated>
  <id>http://renpengben.github.io/</id>
  <author>
    <name><![CDATA[Renpeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《Java 7 Concurrency Cookbook 读书笔记》基本线程同步]]></title>
    <link href="http://renpengben.github.io/blog/2014/05/24/basic-thread-synchronization/"/>
    <updated>2014-05-24T22:21:33+08:00</updated>
    <id>http://renpengben.github.io/blog/2014/05/24/basic-thread-synchronization</id>
    <content type="html"><![CDATA[<pre><code>临界区是访问一个共享资源在同一时间不能被超过一个线程执行的代码块。
</code></pre>

<p><strong>同步方法</strong></p>

<pre><code>每个方法声明为synchronized是一个临界区。
synchronized关键字来保护访问的代码块，替换在整个方法上使用synchronized关键字。
一般使用this关键字引用执行该方法的对象。

synchronized (this) {
// Java code
}
</code></pre>

<p><strong>在同步的类里安排独立属性</strong></p>

<pre><code>当使用synchronized关键字来保护代码块时，必须通过一个对象的引用作为参数。
通常，使用this关键字来引用执行该方法的对象，当有多个共享属性时可以创建多个独立属性，
保证每个共享变量同步访问。
</code></pre>

<p><strong>在同步代码中使用条件</strong></p>

<pre><code>Java在Object对象中提供wait()，notify()，和notifyAll() 方法的实现。一个线程可以在
synchronized代码块中调用wait()方法。如果在synchronized代码块外部调用wait()方法，
JVM会抛出IllegalMonitorStateException异常。
当线程调用wait()方法，JVM让这个线程睡眠，并且释放控制synchronized代码块的对象，
这样，虽然它正在执行但允许其他线程执行由该对象保护的其他synchronized代码块。
为了唤醒线程，你必须在由相同对象保护的synchronized代码块中调用notify()或notifyAll()方法。
</code></pre>

<p><strong>使用Lock同步代码块</strong></p>

<pre><code>Lock 接口比synchronized关键字提供更多额外的功能。新功能之一是实现的tryLock()方法。
这种方法试图获取锁的控制权并且如果它不能获取该锁，是因为其他线程在使用这个锁，
它将返回这个锁。使用synchronized关键字，当线程A试图执行synchronized代码块，
如果线程B正在执行它，那么线程A将阻塞直到线程B执行完synchronized代码块。
使用锁，你可以执行tryLock()方法，这个方法返回一个 Boolean值表示，
是否有其他线程正在运行这个锁所保护的代码。  

Lock接口允许读写操作分离。
Lock接口比synchronized关键字提供更好的性能。

private final Lock lock=new ReentrantLock();
//获取锁
lock.lock();
try {

   } catch (InterruptedException e) {
 }finally { 
//释放锁
lock.unlock();
 }

Lock 接口（和ReentrantLock类）包含其他方法来获取锁的控制权，那就是tryLock()方法。
这个方法与lock()方法的最大区别是，如果一 个线程调用这个方法不能获取Lock接口的控制权
时，将会立即返回并且不会使这个线程进入睡眠。这个方法返回一个boolean值，
true表示这个线程 获取了锁的控制权，false则表示没有。

ReentrantLock锁可重入。
</code></pre>

<p><strong>使用读/写锁同步数据访问</strong></p>

<pre><code>ReadWriteLock接口和唯一一个实现它的ReentrantReadWriteLock类。
这个类提供两把锁，一把用于读操作和一把用于写操作。同时可以有多个线程执行读操作，
但只有一个线程可以执行写操作。当一个线程正在执行一个写操作，不可能有任何线程执行读操作。

private ReadWriteLock lock=new ReentrantReadWriteLock();

//读操作锁
private void read(){

lock.readLock().lock();
//read code
lock.readLock().unlock();

}
//写操作锁
private void write(){
lock.writeLock().lock();
//write code
lock.writeLock().unlock();
}
</code></pre>

<p><strong>修改Lock的公平性</strong></p>

<pre><code>在ReentrantLock类和 ReentrantReadWriteLock类的构造器中，允许一个名为fair的boolean
类型参数， 默认值为 false。
当多个线程等待一把锁时，这个锁必须选择一个进入临界区，当fair为false时这个选择没有标准
即非公平模式。
当这个值为true时，锁将选择等待时间最长的进入临界区即公平模式。由于tryLock()方法并不会
使线程进入睡眠，因此此参数不影响它。
</code></pre>

<p><strong>在Lock中使用多条件</strong></p>

<pre><code>Condition条件变量，等待某种条件的发生，条件发生后，可以唤醒等待在该条件上的一个线程，
或所有线程。条件变量要与锁一起协同工作。

 ReentrantLock lock = new ReentrantLock(); 
 Condition condition = lock.newCondition(); 

 condition.await();//满足某条件时等待  Object.wait();
 condition.signal(); //唤醒等待的其中一个线程  Object.notify(); 
 condition.signalAll(); //唤醒等待的所有线程   Object.notifyAll();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Java 7 Concurrency Cookbook 读书笔记》线程管理]]></title>
    <link href="http://renpengben.github.io/blog/2014/05/10/thread-management/"/>
    <updated>2014-05-10T23:16:49+08:00</updated>
    <id>http://renpengben.github.io/blog/2014/05/10/thread-management</id>
    <content type="html"><![CDATA[<p><strong>java中创建线程有2种方式：</strong></p>

<pre><code>  1.继承Thread类，覆盖run方法。
  2.构建实现Runnable接口类，然后创建一个Thread类对象传入一个Runnable对象作为构造参数。
</code></pre>

<p><strong>获取和设置线程信息：</strong></p>

<pre><code> ID: 每个线程的独特标识。
 Name: 线程的名称。
 Priority: 线程对象的优先级。优先级别在1-10之间，1是最低级，10是最高级。
 Status: 线程的状态。
 Tips:
 setPriority() 方法会抛出 IllegalArgumentException 异常，如果设置的优先级不是在1-10之间。
 在Java中，线程只能有这6种中的一种状态：  new, runnable, blocked, waiting,
 time waiting, 或 terminated。
</code></pre>

<p><strong>线程的中断：</strong></p>

<pre><code>   Thread类有一个boolean类型的属性表明线程是否被中断，当调用线程的interrupt()方法,
   此属性被设置为true,isInterrupted() 方法仅返回属性值。

   isInterrupted()和interrupted()区别:
   isInterrupted()不会改变interrupted属性值，interrupted()会设置为false，
   interrupted() 方法是一个静态方法，建议使用isInterrupted()方法。
</code></pre>

<p><strong>操作线程的中断机制</strong></p>

<pre><code>   在Thread类的run方法中捕获InterruptedException异常来控制线程的中断。

    private void do() throws InterruptedException
    { 
     //....
     if (Thread.interrupted()) {
    throw new InterruptedException();
     }
     }
      @Override
      public void run() {
       try {
      do();
      } catch (InterruptedException e) {

    } 
    }
</code></pre>

<p><strong>线程的睡眠与恢复</strong></p>

<pre><code>  Thread类的 sleep(long millis) 方法 。表示线程休眠millis毫秒。
  TimeUnit枚举元素的sleep(long millis)方法同样能使当前线程睡眠millis毫秒。
  2种线程休眠的方法都会抛出InterruptedException异常。
</code></pre>

<p><strong>等待线程的终结</strong></p>

<pre><code>  当前线程调用某个线程的join()方法，当前线程会暂停直到被调用线程执行完成。
  join (long milliseconds)
  join (long milliseconds, long nanos)

  ex：thread1调用thread2.join(1000)，那么thread1暂停运行，
  直到一下其中一个条件发生，join方法返回：
  thread2结束运行
  1000毫秒过去了
</code></pre>

<p><strong>守护线程的创建和运行</strong></p>

<pre><code>  在Java中有两类线程：用户线程 (User Thread)、守护线程 (Daemon Thread)。

  守护线程，是指在程序运行的时候在后台提供一种通用服务的线程，
  比如垃圾回收线程就是一个很称职的守护者，并且这种线程并不属于程序中不可或缺的部分。
  因此，当所有的非守护线程结束时，程序也就终止了，同时会杀死进程中的所有守护线程。
  反过来说，只要任何非守护线程还在运行，程序就不会终止。

  Thread类的 setDaemon() 方法设置线程为守护线程，此方法必须在调用start()方法之前调用。
  isDaemon() 方法来检查线程是否是守护线程（方法返回 true) 或者是用户线程 (方法返回 false)。
</code></pre>

<p><strong>处理线程非检测异常</strong></p>

<pre><code>  Java中有2种异常：
  检测异常(Checked Exceptions)：这种异常必须强制捕获或者继续抛出异常（throws）。
  非检测异常(Unchecked Exceptions)：这种异常无需强制捕获。
  在线程对象run()方法中抛出一个检测异常必须捕获，因为run()方法不接受throws抛出异常。

  在Java处理Thread中的非检测异常类，需要实现UncaughtExceptionHandler接口。
  public class ExceptionHandler implements UncaughtExceptionHandler {

  @Override
  public void uncaughtException(Thread t, Throwable e) {

 }
 }
 在线程启动之前设置setUncaughtExceptionHandler(new ExceptionHandler());

当在一个线程里抛出一个异常，但是这个异常没有被捕获（非检查异常）， 
JVM 检查线程的相关方法是否有设置一个未捕捉异常的处理者 。
如果有JVM使用Thread对象和Exception作为参数调用此方法 。
如果线程没有捕捉未捕获异常的处理者， 那么JVM会把异常的 stack trace 写入操控台并结束任务。
静态方法 setDefaultUncaughtExceptionHandler() 为应用里的所有线程对象建立异常handler 。
JVM检测异常3种潜在的Handler：Thread UncaughtExceptionHandler-&gt;
Thread Group UncaughtExceptionHandler-&gt;Default Thread 
UncaughtExceptionHandler-&gt;print stack trace
</code></pre>

<p><strong>本地线程变量</strong></p>

<pre><code>ThreadLocal类为线程的变量存储独立的属性值。
ThreadLocal&lt;Object&gt; threadLocal = new ThreadLocal&lt;Object&gt;() {
    //初始值
    protected Object initialValue() {
        return new Object();
    };

    public void set(Object value) {
    };

    public Object get() {
        return new Object();
    };
    //移除此线程局部变量的值。
    public void remove() {
    };

}; 
InheritableThreadLocal 类提供线程创建线程的值的遗传性 。
如果线程A有一个本地线程变量，然后它创建了另一个线程B，
那么线程B将有与A相同的本地线程变量值。
你可以覆盖 childValue() 方法来初始子线程的本地线程变量的值。
它接收父线程的本地线程变量作为参数。
InheritableThreadLocal&lt;Object&gt; inheritableThreadLocal = 
new InheritableThreadLocal&lt;Object&gt;() {
    protected Object childValue(Object parentValue) {
        return parentValue;
    };
};
</code></pre>

<p><strong>线程组</strong></p>

<pre><code>Java提供ThreadGroup类来组织线程。 
ThreadGroup对象可以由Thread对象组成和由另外的ThreadGroup对象组成,生成线程树结构。
ThreadGroup threadGroup = new ThreadGroup(group name);
Thread thread=new Thread(threadGroup, runnableimpl);
activeCount() 和 enumerate() 方法来获取线程个数和与ThreadGroup对象关联的线程的列表。
</code></pre>

<p><strong>处理线程组内非检测异常</strong></p>

<pre><code>public class MyThreadGroup extends ThreadGroup {
public MyThreadGroup(String name) {
super(name);
}
@Override
public void uncaughtException(Thread t, Throwable e) {
//覆盖此方法
}
}
</code></pre>

<p><strong>线程工厂</strong></p>

<pre><code>ThreadFactory线程工厂。
ThreadFactory 接口只有一个方法是newThread。它接收 Runnable 对象作为参数并返回一个 Thread对象。
public class MyThreadFactory implements ThreadFactory {
@Override
public Thread newThread(Runnable r) {
    return new Thread(r);
}
}
</code></pre>
]]></content>
  </entry>
  
</feed>
